from query_evaluator import QueryEvaluator

class Linker:
    """ A basic linker class. """

    def __init__(self, object_list, gs):
        """
        This class is the linker for microDB. It takes in a list of 
        Command_Struct objects that is generated by the parser, and a 
        GraphStructure object. 


        @type object_list: List of Command_Stuct objects
        @param object_list: List of packaged commands that should be 
        generated by the parser. 
        @type: gs: GraphStructure object
        @param gs: The current internal graph representation. 
        """

        self.list_objects = object_list;
        self.gs = gs
        self.query_evaluator = QueryEvaluator(gs)

    def execute(self):
        """
        Executes commands that were extracted by the parser. 
        """
        # iterate through objects returned by parser to execute queries
        for obj in self.list_objects:
            command_name = obj.get_command()
            attribute_list = obj.get_attr_list()
            if command_name == "CREATE":
                for node in attribute_list:
                    curr_id = node[1]   
                    curr_attrs = node[2]
                    self.gs.set_identifier(curr_id, self.query_evaluator.add_node(curr_attrs))   
            if command_name == "CREATEEDGE":   
                counter = 0
                [nodes1_identifier, nodes1, edge_identifier, edge_attrs, 
                nodes1_identifier, nodes2] = [0]*6
                for item in attribute_list:
                    if ((counter % 3) == 0):   
                        nodes1 = self.query_evaluator.match_node(item[2])
                    elif ((counter % 2) == 1):
                        edge_identifier = item[1]
                        edge_attrs = item[2]   
                    elif((counter % 3) == 2):   
                        nodes2 = self.query_evaluator.match_node(item[2])   
                        for node1 in nodes1:
                            for node2 in nodes2:  
                                self.gs.set_identifier(edge_identifier, 
                                    self.query_evaluator.add_relationship(node1,
                                     node2, edge_attrs))
                    counter += 1   
            if command_name == "MATCH":   
                if (len(attribute_list) == 1):   
                    item = attribute_list[0]   
                    if (item[0] == "n:"):   
                        nodes = self.query_evaluator.match(item[2], None, None)   
                        print nodes   
                    elif (item[0] == "e:"):   
                        edges = self.query_evaluator.match(None, None, item[2])   
                        for edge in edges:   
                            edge_tup = (self.query_evaluator.get_node_attrs(edge[0]), edge[2], self.query_evaluator.get_node_attrs(edge[1]))   
                            print(edge_tup)   
                elif(len(attribute_list) == 2):   
                    item1 = attribute_list[0]   
                    item2 = attribute_list[1]   
                    if (item1[0] == "n:"):   
                        edges = self.query_evaluator.match(None, item1[2], item2[2])   
                        for edge in edges:   
                            edge_tup = (self.query_evaluator.get_node_attrs(edge[0]), edge[2], self.query_evaluator.get_node_attrs(edge[1]))   
                    else:   
                        edges = self.query_evaluator.match(None, item2[2], item1[2])   
                        for edge in edges:   
                            edge_tup = (self.query_evaluator.get_node_attrs(edge[0]), edge[2], self.query_evaluator.get_node_attrs(edge[1]))   
                elif(len(attribute_list) == 3):   
                    item1 = attribute_list[0]   
                    item2 = attribute_list[1]   
                    item3 = attribute_list[2]   
                    edges = self.query_evaluator.match(item1[2], item3[2], item2[2])   
                        for edge in edges:   
                            edge_tup = (self.query_evaluator.get_node_attrs(edge[0]), edge[2], self.query_evaluator.get_node_attrs(edge[1]))   
                    

                # if command_name == "MATCH":   
                #     if len(attribute_list) == 1:   
                #         item = attribute_list[0]
                #         if item[0] == "n:":
                #             nodes = self.query_evaluator.match_node(item[2])   
                #             print nodes
                #         elif item[0] == "e:":   
                #             edges = self.query_evaluator.match_rel(item[2])   
                #             print edges   
                #     elif len(attribute_list) == 2:   
                #         item1 = attribute_list[0]   
                #         item2 = attribute_list[1]   
                #         if item1[0] == "n:":   
                #             edges = self.query_evaluator.match(None, items1[2], items2[2])   
                #             for edge in edges:   
                #                 print (self.query_evaluator.get_node_attrs(edge[0]), 
                #                     edge[2], self.query_evaluator.get_node_attrs(edge[1])   
                #         else:   
                              




            # elif obj.command.upper() == "MATCH":
            #     self.gs.set_identifier(cur_id, self.query_evaluator.match(obj.get_attr(), None, None))
            # elif obj.command.upper() == "RETURN":
            #     print "Return val: " + str(self.gs.get_identifier(cur_id))   

